buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

apply plugin: 'forge'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

version = modArtifactVersion
group = modGroup
archivesBaseName = modArchivesBaseName

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"

    replaceIn "ModInfo.java"
    replaceIn "CoremodInfo.java"

    replace "@modid@", modId
    replace "@name@", modName
    replace "@version@", modVersion
    replace "@group@", modGroup
    replace "@groupInternal@", modGroupInternal
}
processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        if (project.hasProperty("modCoremod") && project.property("modCoremod") != "") {
            attributes 'FMLCorePlugin': modCoremod
            attributes 'FMLCorePluginContainsFMLMod': 'true'
        }
        if (project.hasProperty("modAccessTransformer") && project.property("modAccessTransformer") != "") {
            attributes 'FMLAT': modAccessTransformer
        }
    }
}

dependencies {

}

task apiJar(type: Jar) {
    from(sourceSets.main.java) {
        include modApiPattern
    }
    classifier = 'api'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    if (project.hasProperty("modApiPattern") && project.property("modApiPattern") != "") {
        archives apiJar
    }
    archives deobfJar
    archives sourcesJar
}